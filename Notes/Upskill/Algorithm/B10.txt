insertion sortta unsorted parttaki ilk kısım sorted partta sayilir ve sorting islemine unsorted parttaki ikinci değerden başlanır.


-----------------------------------------------------------------------

public class JD1MergeSort {
   public static void mergeSort(int[] array){                                        = leftArray, rightarray diye derinlere inerken array kismina daha az deger yaziliyor
       if (array.length<2) return;// if you have an array with one element STOP
       int mid=array.length/2;
       int[] leftArray=new int[mid];
       for (int i = 0; i <mid ; i++) leftArray[i]=array[i];
       int[] rightArray=new int[array.length-mid];
       for (int i = mid; i < array.length ; i++) rightArray[i-mid]=array[i];
       mergeSort(leftArray);        = tek değer kalana kadar recursion uyguluyoruz
       mergeSort(rightArray);
       merge(leftArray, rightArray, array); = leftArray ve rightarray birlestirilir
   }
    public static void merge(int[] left, int[] right, int[] result){
       int i=0,j=0,k=0;                                 = i left array'de çalışıyor j right array'de calisiyor k ise result array'de calisiyor
       while(i<left.length && j<right.length){              = left ya da right'ten birisi dolarsa while'in disina cikiyor. Boylelikle degerleri eksik yazilan varsa asagidaki whilelerde ekliyoruz.
           if (left[i]<=right[j]) result[k++]=left[i++];    = Bu kısımda left ve right'den değerler sort edilerek resulte ekleniyor
           else result[k++]=right[j++];                      
       }
       while(i<left.length) result[k++]=left[i++];          = Yukarıda eksik yazılan değerler burada ekleniyor
       while(j<right.length) result[k++]=right[j++];        = left size + right size = result size, 
    }
}

-----------------------------------------------------------------------





