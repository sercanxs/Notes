insertion sortta unsorted parttaki ilk kısım sorted partta sayilir ve sorting islemine unsorted parttaki ikinci değerden başlanır.


-----------------------------------------------------------------------

public class JD1MergeSort {
   public static void mergeSort(int[] array){                                        = leftArray, rightarray diye derinlere inerken array kismina daha az deger yaziliyor
       if (array.length<2) return;// if you have an array with one element STOP
       int mid=array.length/2;
       int[] leftArray=new int[mid];
       for (int i = 0; i <mid ; i++) leftArray[i]=array[i];
       int[] rightArray=new int[array.length-mid];
       for (int i = mid; i < array.length ; i++) rightArray[i-mid]=array[i];
       mergeSort(leftArray);        = tek değer kalana kadar recursion uyguluyoruz
       mergeSort(rightArray);
       merge(leftArray, rightArray, array); = leftArray ve rightarray birlestirilir
   }
    public static void merge(int[] left, int[] right, int[] result){
       int i=0,j=0,k=0;                                 = i left array'de çalışıyor j right array'de calisiyor k ise result array'de calisiyor
       while(i<left.length && j<right.length){              = left ya da right'ten birisi dolarsa while'in disina cikiyor. Boylelikle degerleri eksik yazilan varsa asagidaki whilelerde ekliyoruz.
           if (left[i]<=right[j]) result[k++]=left[i++];    = Bu kısımda left ve right'den değerler sort edilerek resulte ekleniyor
           else result[k++]=right[j++];                      
       }
       while(i<left.length) result[k++]=left[i++];          = Yukarıda eksik yazılan değerler burada ekleniyor
       while(j<right.length) result[k++]=right[j++];        = left size + right size = result size, 
    }
}

-----------------------------------------------------------------------
dual pivot quick sortta left part mid part ve right part var.


public class JD1QuickSort {                                           
    public static void qSort(int[] array, int start, int end){
       if (start>=end) return; //termination
       int boundary=partition(array, start, end);                   --> içinde bulunulan kısımda pivottan kücük degerlerin sol tarafa ve pivottan büyük değerlerin sağ tarafa
                                                                        sıralanmasindan sonra pivotun yeni indexi.
       qSort(array, start, boundary-1);// call qSort for left part  --> left part için recursion
       qSort(array,boundary+1, end);// call qSort for right part
    }

    public static int partition(int[] array, int start, int end){
        int pivot=array[end];                                    = Son değer pivot seçildi. pivot herhangi bir değer secilebilir.
        int boundary=start;                                      = boundary, start olarak seçildi.
        for (int i = start; i <=end ; i++) {                     = i, starttan end'e kadar looplandi.
            if(array[i]<=pivot) swap(array, i, boundary++);      = başlarda pivottan kücük değerler kendileriyle swaplanirlar. Ama pivottan büyük değer bulunduğunda 
        }                                                          swap işlemi gerçekleşmez ve i sayısı boundary'nin bir fazlasi olur. Ne zamanki pivottan kücük değer bulunur
        return boundary-1;                                         swap işlemi tekrar gerçekleşir ve büyük değer yüksek array index'ine swaplanir. Pivottan kücük deger bulundukca
    }                                                              swap işlemi tekrar eder. En son pivot değerine gelir pivot değeri kendilerinden büyük degerlerin solunda olmasi 
    public static void swap(int[] array, int idx1, int idx2){      için o da swaplanir. return kısmında boundary-1=pivotun indexini verir.
        int temp=array[idx1];
        array[idx1]=array[idx2];
        array[idx2]=temp;
    }
}

-----------------------------------------------------------------------


public class DNode { // Node class for doubly linked list
    int key;                                        = key value pairs oluşturduk.
    int value;
    DNode prev; // Reference type                   = doubly linked list için node class oluşturduk.
    DNode next;                                     

    public DNode(int key, int value) {
        this.key = key;
        this.value = value;
    }

    public DNode() {
    }
}


-----------


package review_sort;

import java.util.HashMap;
import java.util.Map;

public class LRUCache {
    int size;
    int capacity;
    HashMap<Integer,DNode> cacheMap=new HashMap<>(); = hashmap oluşturduk. Integer = key, DNode = Class
    DNode head;      = Dummy head ve Dummy tail oluşturduk.
    DNode tail;

    public LRUCache(int capacity) { = constructor'da capacity'i ayarladık.
        this.capacity = capacity;
        this.size=0;
        this.head=new DNode();    = Dummy node with no information 
        this.tail=new DNode();
        head.next=tail;           = başlangıçta head, taili işaret etti.
        tail.prev=head;           = tail ise head'i işaret etti.
    }
    public void addNode(DNode node){ = yeni node ekledik. Eklenen node recent olacağı için head'den sonra eklendi
        node.prev=head;             
        node.next=head.next;

        head.next.prev=node;         = 2 tane nokta kullanıldı. head.next'teki elementin prev'i node'i işaret etti.
        head.next=node;
    }
    public void removeNode(DNode node){ = remove method
        DNode prevNode=node.prev;
        DNode nextNode=node.next;

        prevNode.next=nextNode;
        nextNode.prev=prevNode;
    }
    public void moveToFirst(DNode node){ = elementi ilk sıraya taşıma
        removeNode(node);
        addNode(node);
    }
    public DNode popLast(){ = son elementi silme
        DNode popped=tail.prev;
        removeNode(popped);
        return popped;
    }
    public int get(int key){                         = get methodu
        //Go and check hashmap if you have the key
        DNode node= cacheMap.get(key);
        // return -1 if you dont have this key
        if(node==null) return -1;
        else {
            moveToFirst(node);// make it recent
            return node.value;// return value of node
        }
    }
    public void put(int key, int value){            = put methodu
        //Go and check hashmap if you have the key
        DNode node= cacheMap.get(key);
        if(node==null) { // if I dont have this key in my lru
            DNode newNode=new DNode(key,value);
            cacheMap.put(key, newNode); // put in hashmap
            addNode(newNode); // put in linkedlist
            size++;
            if (size>capacity){
                DNode last=popLast();// remove from the linkedlist
                cacheMap.remove(last.key);
                size--;
            }
        }else {  // I  have this key in my lru
            node.value=value; // update the value
            moveToFirst(node);// make it recent

        }
    }
    void printLRU(){                                               = Bu kısımda Map.Entry kullanıldı.
        for(Map.Entry<Integer,DNode> entry:cacheMap.entrySet()){           
            System.out.println(entry.getKey() +": "+ entry.getValue());       = mapteki bütün key valueler yazildi.
        }
    }

}


--------------------------------------


package review_sort;

public class LRUTestApp {
    public static void main(String[] args) {
     /*   LRUCache lru=new LRUCache(3);       = Yeni lrucache oluşturuldu 3 kapasiteli.
        lru.put(1,1);
        lru.put(2,2);
        lru.put(3,3);
        System.out.println(lru.get(1));       // Access , makes (1,1) most recently used
        lru.put(4, 4); // Cache ={ (4,4), (1,1), (3,3)}
        System.out.println(lru.get(2)); // return -1;
        lru.printLRUCache();*/             // linkedliste göre sıralansa değerler recent sırasına göre sıralanır Burada ise hash codelere göre sıralanabilir.
    }
}















