Left-Right ile oluşturulan binary search'te aranan değer mid'ten küçükse right değeri mid-1'e kaydırılır, tersi ise left değeri mid+1'e 
kaydırılır.

recursive ve iterative olarak uygulunabilir

recursivelerde stacklerde birikme olacağı için space complexity log n'dir
iterativelerde bir tane while olduğu için space complexity O(1)'dir

Time complexity recursive ve iterative olanlar için O(logn)'dir.



package SearchReview;

public class SearchProblem {
    public static void main(String[] args) {
        int[] nums={-1,0,2,4,5,6,7,8};
        System.out.println(search(nums, 9));
    }
    public static int search(int[] array, int data) {
        // initialize left and right
        int left=0;						= left başlangıç değeri=0
        int right=array.length-1;			        = right başlangıç değeri =length-1
        // have a while loop (left<=right)
        while (left<=right) {
            // calculate mid
            int mid=(left+right)/2;
            // compare == mid then return mid index
            // else if data<mid then right=mid-1
            // else left =mid+1
            if (data==array[mid]) return mid;                   = aranan değer ile mid değeri eşitse mid indexini returnle
            else if(data<array[mid]) right=mid-1;               = aranan değer midden kücükse right=mid-1
            else left=mid+1;
        }
       return -1;
    }

}



log3(n), log2(n)'den küçüktür ve log2(n)/log3(n) oranı hiçbir zaman değişmez. Bir tek n değeri 1 ise değişir.(0/0 tanımsız oluyor.)

log3(n)= (log(2)/log(3))xlog2(n)'dir.

Dolayısıyla log3(n) big o notation'da log2(n)'e göre daha hızlı iken yandaki constant değerler
ile log2(n)'i geçebilir. log2(n)/log3(n) oranı 2'yi geçmediği için log3(n)'i iki ile çarpmak log3(n)'i log2(n)'den daha büyük değer yapar. Yani ternary search her zaman
binary search'ten yavaştır. (ternary searchte iki comparison var)


public class TernarySearch {
    public static int ternarySearchIterative(int[] array, int data) {
        int left = 0;
        int right = array.length - 1;

        while (right >= left) {
            int partition = (right - left) / 3;              = 3 parçaya böleceğimiz için parçaların uzunluklarını hesapladık.
            int middle1 = left + partition;                  = mid1 değeri left + partition'a eşit
            int middle2 = right - partition;                 = mid2 değeri right - partitiona eşit
            if (array[middle1] == data) return middle1;
            if (array[middle2] == data) return middle2;      = Ternary search'te 2 tane middle var.
            if (data < array[middle1]) right = middle1 - 1;
            else if (data > middle2) left = middle2 + 1;
            else {
                left = middle1 + 1;
                right = middle2 - 1;
            }
        }
        return -1;
    } // end ternary

    public static int ternarySearchRecursive(int[] array, int data, int left, int right){         = Ternary search'in recursive hali
        if (left>right) return -1;
        int partition=(right-left)/3;
        int middle1 = left + partition;
        int middle2 = right - partition;
        if (array[middle1] == data) return middle1;
        if (array[middle2] == data) return middle2;
        if (data<array[middle1]) return ternarySearchRecursive(array,data, left, middle1-1);
        if(data>array[middle2]) return ternarySearchRecursive(array, data, middle2+1, right);
        else return ternarySearchRecursive(array, data, middle1+1, middle2-1);


    }
}


------------------------------------------------------------------------

public class JumpSearch {
    public static int jumpSearch(int[] array, int data){
        int blockSize=(int)Math.sqrt(array.length); = array'in uzunluğunun karekökü bloksize'i verdi.
        int start=0;                                = başlangıç değeri index 0
        int next=blockSize;                         = diğer değer blockSize kadar sonra olacak.
        while (start< array.length && array[next-1]<data){  = doğru grubu bulana kadar ileri sıçradık
            start=next;
            next+=blockSize;
            if (next> array.length) next= array.length;
        }
        for (int i = start; i <next ; i++) { = doğru grupta linear search ile data aradık.
           if (array[i]==data) return i;
        }
        return -1;
    }
}

------------------------------------------------------------------------

Exponential searchte blocklar içinde binary search yapıldığı için time complexity log(n)'dir


public class ExponentialSearch {
    public static int exponentialSearch(int[] array, int data){
        int bound=1;                                                   = bound'in ilk değeri
        while (bound<array.length && array[bound]<data) bound*=2;      = data bound'in sağ tarafında kalıyorsa bound 2 ile çarpılır.

        int left=bound/2;                                              = bound 2 ile çarpılınca left değeri de yükselir.
        int right=Math.min(bound, array.length-1);
        return BinarySearch.binarySearchRecursive(array, data, left,right); = uygun blok bulunduğunda binarySearch uygulanır.
    }
}




------------------------------------------------------------------------


public class Search2DMatrix {
    public static void main(String[] args) {
     int[][] matrix={{1,3,5,7},{10,11,16,20},{23,30,34,60}};             = 2 boyutlu array oluşturduk.
        System.out.println(searchMatrixLogNM(matrix, 3));                = 2 boyutlu array'de 3 değeri var mı onu aradık.
    }
    public static boolean searchMatrix(int[][] matrix, int target) {
        // number of rows and cols
        int numberOfCols=matrix[0].length;                               = column sayısını bulduk.
        int numberOfRows=matrix.length;                                  = row sayısını bulduk.
        // calculate right block
        int currentRow=0;
        while(currentRow< numberOfRows-1 ){                              = aranan datanın bulunacağı blok'u hesapladık. Bir tür jump search uyguladık ama blok size'i hesaplamadık.
            if(target>matrix[currentRow][numberOfCols-1]) currentRow++;
            else break;
        }
       // binary search in current row                                   = doğru bloku bulunca binary search uyguladık.
        int left =0;
        int right=numberOfCols-1;
        while (left<=right){
            int mid=(left+right)/2;
            if (target==matrix[currentRow][mid]) return true;
            else if(target<matrix[currentRow][mid]) right=mid-1;                 = performası = o(m)+o(log(n))
            else left=mid+1;
        }
    return false;
    }

-----------------------------------------------------------------------------------------


    public static boolean searchMatrixLogNM(int[][] matrix, int target) {
        int numberOfCols=matrix[0].length;  = 4 colmn var
        int numberOfRows=matrix.length;     = 3 row var
        int left =0;                        = başlangıç değeri sıfır
        int right= numberOfRows*numberOfCols-1; = son değer rowxcolumn-1'e eşit.
        while (left<=right){
            int midIndex=(left+right)/2;        = mid index'i hesapladık.
            // rows and column from index number;
            int row=midIndex / numberOfCols;       = mid index'in bulunduğu row'u hesapladik. mid index'i column sayisina bölünce bölüm değeri row sayısını verdi.
            int col=midIndex % numberOfCols;       = mid index'in bulunduğu column'i hesapladık. mid index'i column sayisina bölünce kalan değer column sayısını verdi.
            // get value from matrix
            int midValue=matrix[row][col];         = mid index'teki değeri aldık.
            if (target==midValue) return true;     = binary search uyguladık.
            else if(target<midValue) right=midIndex-1;                              =  O(log(m * n)) --> m*n tüm değerleri verdiği için tüm değerlere binary search uygulanıyor.
            else left=midIndex+1;            						                 
        }
        return false;
    }
}



------------------------------------------------------------------------

                                 
 