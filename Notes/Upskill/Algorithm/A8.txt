insertte bubble up
remove'de bubble down gerekebilir

Heap'i(heap'in kendisini de array olarak oluşturduk.) remove ederken root değerlerini array'e kaydedersek bu değerler yeni array'e sıralı şekilde eklenir. Dolayısıyla array değerleri 
heap kullanılarak sıralanabilir.

heapify yaparken heap'e değerleri tek tek atmak yerine hepsini birden atarız. böyle bir durumda değerler normal heap'teki gibi yukarıdan aşağı büyükten küçüğe ya da küçükten büyüğe 
sıralanmazlar. Rastgele sıralanırlar. Devamında ise heapify özelliği uygulanır ve normal heapteki gibi yukarıdan aşağı sıraya girer değerler.
heapify normal heap'e göre daha hızlı çalışır.(faster, no space complexity)

insert

normal heap --> nlogn
heapify --> <O(n)    -> O(n)'den biraz küçük olabilir

heapify (n/2 - 1) sayılı index'ten sıralama işlemine başlar yani leaves'leri hariç tutar ve işleme ortadan başlar(Yukarıdan aşağıya kademe olarak ortadan değil toplam element 
sayılarının ortası, yani leaves kısmının bir ya da 2 üstü)


--------------------------------------------------------------------------------------------------------------------------

import java.util.NoSuchElementException;

public class MyHeap {
    int[] items;
    int size;

    public MyHeap(int capacity) {
        this.items = new int[capacity];  
        this.size=0;
    }
    public int peek() {
        if (size==0) throw new NoSuchElementException();
        return items[0];
    }
    public void insert(int value) {
        if(size==items.length) throw new IllegalStateException(); = eğer size length'e eşitse array'de boş yer yok demektir
        else {
           items[size++]=value;
           bubbleUp();
        }
    }
    public void bubbleUp(){
        //calculate start point/index
        int index=size-1;
        // while index >0 %% parent is less than child continue...
        // 1. swap child and parent
        // calculate next index = parent index
        while (index>0 && items[index]>items[parentIndex(index)]){
            swap (index, parentIndex(index));
            // assign index with the parent index
            index=parentIndex(index);//like current=current.next
        }
    }

    public int remove(){
        if (size==0) throw new NoSuchElementException();
        else {
            int result= items[0];
            items[0]=items[--size];
            bubbleDown();
            return result;
        }
    }
    public void bubbleDown(){
        int index=0;
        int largerChildIndex;
        while (index<=size && !isValidParent(index)){
            largerChildIndex=largerChildIndex(index);
            swap(index, largerChildIndex);
            index=largerChildIndex;
        }
    }
    public boolean isValidParent(int index){
        if (!hasLeftChild(index)) return true;
        else {
            boolean isValid=(items[index]>=items[leftChildIndex(index)]);
            if (hasRightChild(index)) {
                isValid= (items[index]>=items[leftChildIndex(index)]&&items[index]>=items[rightChildIndex(index)]);
            }
            return isValid;
        }
    }

    public void swap(int first, int second){
        int temp=items[first];
        items[first]=items[second];
        items[second]=temp;
    }
    public int parentIndex(int index) { return (index-1)/2;}
    public boolean hasLeftChild(int index){ return  leftChildIndex(index)<size;}
    public boolean hasRightChild(int index){ return  rightChildIndex(index)<size;}
    public int leftChildIndex(int index){ return index*2 +1;}
    public int rightChildIndex(int index){ return index*2 +2;}
    public int largerChildIndex(int index) {
        if (!hasLeftChild(index)) return index;
        else if (!hasRightChild(index)) {
            return leftChildIndex(index);
        }
        return items[leftChildIndex(index)]>items[rightChildIndex(index)] ? leftChildIndex(index):rightChildIndex(index);
    }
    public void printHeap(){
        for (int i = 0; i < size; i++) {
            System.out.print(items[i]+ ", ");
        }
        System.out.println();
    }
}


--------------------------------------------------------------------------------------------------------------------------

package Review7Heapify;

import java.util.NoSuchElementException;

public class MyHeap {
    int[] items;
    int size;

    public MyHeap(int capacity) {
        this.items = new int[capacity];
        this.size=0;
    }

    public MyHeap(int[] arr) {
        this.items = new int[arr.length];    = constructor'da içeriye yollanan array'in uzunluğu ile yeni array'in uzunluğunu ayarladık.
        this.size=arr.length;                = heapify'de değerlerin hepsi birden array'e kaydedildiği için size'i, içeriye yollanan array'in lengthi olarak ayarladık.
        this.items=arr;                      = items artık içeriye yollanan array'i işaret etti. Böyle durumda yukarıdaki new int ile oluşturulan array objecti gereksiz gibi duruyor.
        heapify();
    }
    public void heapify(){
        int startIndex=(size/2)-1;               = başlangıç noktası
        for (int i = startIndex; i >=0 ; i--) {
            // if current element is not a valid parent bubble down it until it is valid.       = içinde bulunulan değer düzgün parent oluncaya kadar aşağı bubble down
            heapifyCurrent(i);        							          işlemi uygulanır
        }
    }
    public void heapifyCurrent(int index){
        // This will continue until the parent is avalid parent
        if(!isValidParent(index)){                                = parent valid değilse
            int largestChildIndex=largerChildIndex(index);
            swap(index,largestChildIndex);                        = parent ile largest child'i swapledik.
            heapifyCurrent(largestChildIndex);                    = largestChild'in index'inden devam ettik. largestChild'in indexinde swap işleminden dolayı yeni değer var.
        }                                                           Parent, valid parent olana kadar child'lar ile swaplandı. heapify yöntemi ile normal heapteki gibi yukarıdan aşağı sıralanma elde edilir.
    }
    public int peek() {
        if (size==0) throw new NoSuchElementException();
        return items[0];
    }
    public void insert(int value) {
        if(size==items.length) throw new IllegalStateException();
        else {
           items[size++]=value;
           bubbleUp();
        }
    }
    public void bubbleUp(){
        //calculate start point/index
        int index=size-1;
        // while index >0 %% parent is less than child continue...
        // 1. swap child and parent
        // calculate next index = parent index
        while (index>0 && items[index]>items[parentIndex(index)]){
            swap (index, parentIndex(index));
            // assign index with the parent index
            index=parentIndex(index);//like current=current.next
        }
    }

    public int remove(){
        if (size==0) throw new NoSuchElementException();
        else {
            int result= items[0];
            items[0]=items[--size];
            bubbleDown();
            return result;
        }
    }
    public void bubbleDown(){
        int index=0;
        int largerChildIndex;
        while (index<=size && !isValidParent(index)){
            largerChildIndex=largerChildIndex(index);
            swap(index, largerChildIndex);
            index=largerChildIndex;
        }
    }
    public boolean isValidParent(int index){
        if (!hasLeftChild(index)) return true;
        else {
            boolean isValid=(items[index]>=items[leftChildIndex(index)]);
            if (hasRightChild(index)) {
                isValid= (items[index]>=items[leftChildIndex(index)]&&items[index]>=items[rightChildIndex(index)]);
            }
            return isValid;
        }
    }

    public void swap(int first, int second){
        int temp=items[first];
        items[first]=items[second];
        items[second]=temp;
    }
    public int parentIndex(int index) { return (index-1)/2;}
    public boolean hasLeftChild(int index){ return  leftChildIndex(index)<size;}
    public boolean hasRightChild(int index){ return  rightChildIndex(index)<size;}
    public int leftChildIndex(int index){ return index*2 +1;}
    public int rightChildIndex(int index){ return index*2 +2;}
    public int largerChildIndex(int index) {
        if (!hasLeftChild(index)) return index;
        else if (!hasRightChild(index)) {
            return leftChildIndex(index);
        }
        return items[leftChildIndex(index)]>items[rightChildIndex(index)] ? leftChildIndex(index):rightChildIndex(index);
    }
    public void printHeap(){
        for (int i = 0; i < size; i++) {
            System.out.print(items[i]+ ", ");
        }
        System.out.println();
    }
}
















