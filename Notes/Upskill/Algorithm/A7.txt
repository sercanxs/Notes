Traversallarda childlara inerken biriken methodlarla ilgili özellikler stackte birikebilir.
Yani left childlara inerken right child'lerle ilgili değişkenler stackte toplanabilir.

Method'un kendini çağırarak tekrarlanması(Recursion) yerine while loop kullanınca stack kullanmak gerekebilir. stack LIFO'dur.
root stack'den pop edilir. root print edilir. rightchild önce leftchild sonra stack'e kaydedilir(root-left-right için). pop ile alınan element current'i temsil
eder. Recursion'da stack işlemleri arkada tekrarlanıyor olabilir. While'de stack işlemlerinin tekrarlanmamasının sebebi tek bir while vardır.
Recursion'da aynı method tekrar tekrar çağrılır ve bir sürü kopyası oluşur. While bir tane olduğu için stack kullanımı yoktur.


-----------------------------------------------------------------------------


package Review_Trees_Part1;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class TreeClass {
    TreeNode root;

    public TreeClass() {
        //Why default is null? Reference types? Null
    }

    public void insert(TreeNode newNode) {
        //Tree can be empty
        if (root == null) {
            root = newNode;
            return;
        }
        TreeNode current = root;
        while (true) {
            if (newNode.id <= current.id) {
                if (current.leftChild == null) {
                    //make insertion
                    current.leftChild = newNode;//if left is null where you cannot branch left
                    break;
                }
                current = current.leftChild;// if left child is not null branch left
            } else {
                if (current.rightChild == null) {
                    //make insertion if right is null where you cannot branch right
                    current.rightChild = newNode;
                    break;
                }
                current = current.rightChild;// if right child is not null branch right
            }
        }
    }

    void preOrderTraversal(TreeNode root) {
        if (root == null) return;// termination
        System.out.println(root.name); // visit/perform operation root node
        preOrderTraversal(root.leftChild);// recursive visit left subtree
        preOrderTraversal(root.rightChild);// recursively visit right subtree
    }
    void preOrderTraversalIterative(TreeNode root) {
        // check if root is null
        if(root==null) return;
        // create stack
        Stack<TreeNode> stack=new Stack<>();
        // push root into stack
        stack.push(root);
        // while loop (until stack is empty)
        while(!stack.isEmpty()){
            //pop stack
            TreeNode poppedNode=stack.pop();
            // print popped node
            System.out.print(poppedNode.name + " , ");
            // push popped node children into stack (rightchild first than left child)
            if (poppedNode.rightChild!=null) stack.push(poppedNode.rightChild);
            if (poppedNode.leftChild!=null)stack.push(poppedNode.leftChild);

        }
    }
    void inOrderTraversalIterative(TreeNode root) {
        if (root == null) return;// termination
        Stack<TreeNode> stack =new Stack<>();
        TreeNode current=root;
        //traverse tree
        while (current!=null || !stack.isEmpty()){                              = while'de stack is not empty de kullanılıyor yoksa rightlere inme ile ilgili sorun yaşanabilir.
            // Find left most node in tree
            while(current!=null){
                //push node before to stack branching left
                stack.push(current);
                current=current.leftChild;
            }// current is null now
            current=stack.pop();
            System.out.print(current.name +" , ");
            // now its right Child's turn
            current=current.rightChild;
        }//end while
    }

    void inOrderTraversal(TreeNode root) {
        if (root == null) return;// termination
        inOrderTraversal(root.leftChild);//recursively visit left subtree
        System.out.println(root.name);
        inOrderTraversal(root.rightChild);// recursively visit right subtree
    }

    void postOrderTraversal(TreeNode root) {
        if (root == null) return;// termination
        postOrderTraversal(root.leftChild);//recursively visit left subtree
        postOrderTraversal(root.rightChild);// recursively visit right subtree
        System.out.println(root.name);

    }
    void levelOrderTraversal(){
        if (root==null) return;
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode toVisit=queue.poll();
            System.out.println(toVisit.name);
            if(toVisit.leftChild!=null) queue.add(toVisit.leftChild);
            if(toVisit.rightChild!=null) queue.add(toVisit.rightChild);
        }
    }
}

-----------------------------------------------------------------------------

package Review_Trees_Part2;

import java.util.LinkedList;
import java.util.Queue;

public class MyTree {
    TNode root;

    public MyTree() {
    }
    void insert(int value){
        TNode newNode=new TNode(value);
        if (root==null) {
            root=newNode;
            return;
        }
        TNode current =root;
        while(true){
            if (value<= current.value){

                if (current.leftChild==null){
                    // if left is null insert there!!!
                    current.leftChild=newNode;
                    break;
                }
                //if leftChild is not null branch into left subtree!!
                current=current.leftChild;
            }
            else {
                if (current.rightChild==null){
                    // if right is null insert there!!!
                    current.rightChild=newNode;
                    break;
                }
                //if rightChild is not null branch into right subtree!!
                current=current.rightChild;
            }
        }
    }
    // PreOrder Traversal of the tree
    // Root-Left-right
    void preOrderTraversal(TNode root){
        if(root==null) return;// termination
        System.out.print(root.value +", "); // visit root
        preOrderTraversal(root.leftChild);  // visit left subtree
        preOrderTraversal(root.rightChild); // visit right subtree
    }
    void inOrderTraversal(TNode root){
        if (root==null) return; // termination
        inOrderTraversal(root.leftChild);
        System.out.print(root.value+", ");
        inOrderTraversal(root.rightChild);
    }
    void postOrderTraversal(TNode root){
        if (root==null) return;// termination
        postOrderTraversal(root.leftChild); // branch and finish left subtree
        postOrderTraversal(root.rightChild); // branch and finish right subtree
        System.out.print(root.value+", ");  // visit root
    }
    void levelOrderTraversal(){
        if(root==null) return;
        Queue<TNode>  queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TNode toVisit=queue.poll();
            System.out.print(toVisit.value+", ");
            if (toVisit.leftChild!=null) queue.add(toVisit.leftChild);
            if (toVisit.rightChild!=null) queue.add(toVisit.rightChild);
        }
    }
   // Task 1: Implement finding an integer value in a BST (Binary Search Tree).         = notlardaki taskların cevapları.
       boolean contains(int value){
        if (root==null) return false;
        TNode current=root;
           while (current != null) {
           // value < current
               if (value< current.value) current=current.leftChild;
               //   value>current
               else if (value>current.value) current=current.rightChild;
               else return true;
           }
           return false;
           }

   //  Task 2: Implement a method that returns true if the node is a leaf in a BST.
      boolean isLeaf(TNode node){
       return node.leftChild==null && node.rightChild==null;
      }
   // Task 3: Implement a method that prints leaves of a BST.
       void printLeaves(TNode root){
            if (root==null) return;
            if (isLeaf(root)) System.out.print(root.value+" , ");
            printLeaves(root.leftChild);
            printLeaves(root.rightChild);
       }

       //Task 4: Implement a method that calculates height of a Node of a BST.
          int height(TNode root){
             // if root null return -1
              if (root==null) return -1;
              // if leaf return 0;
              if(isLeaf(root)) return 0;
             return 1 + Math.max(height(root.leftChild),height(root.rightChild));
          }

   // Task 5: Implement a method that counts leaves of a BST.
       int countLeaves(TNode root){
        // root return null
           if(root==null) return 0;
           if (isLeaf(root)) return 1;
           return countLeaves(root.leftChild) + countLeaves(root.rightChild);
       }
    //Task 6: Implement a method that returns sum of leaf values of a BST.
      int findSumOfLeaves(TNode root){
          if(root==null) return 0;
          if (isLeaf(root)) return root.value;
          return findSumOfLeaves(root.leftChild) + findSumOfLeaves(root.rightChild);
      }
   // Task 7: Implement a method that returns sum of Node values of a BST.
        int  nodeSums(TNode root){
            if(root==null) return 0;
            return root.value+ nodeSums(root.leftChild) + nodeSums(root.rightChild);
        }


}