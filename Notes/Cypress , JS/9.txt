
describe('How to do API tests with cypress', () => {
    it('Simple GET request, check status headers and body', () => {

      cy.request({  = Api testi için request yazdık. 

        // this function takes a json object as parameter, and inside this object we define core parts of HTTP request
        method: 'GET',   = GET methodu kullandık.
                                                     
        // hardcoded url: https://demoqa.com/BookStore/v1/Books
        url: `${Cypress.env('apiUrl')}${Cypress.env('apiBooks')}`, = cypress.config.js içinde env'den url girdik.

        // other than method and url the rest of options depend on your test case
        failOnStatusCode: false, = Cypress'te 2xx ve 3xx harici statuslarda assertion yapabilmek için bunu yazdık.
      }).then((response) => {
        expect(response.status).to.equal(200); = response status'u kontrol ettik.

        // cy.log(response.body.books[0].isbn); = response body'den değer yazdık.
      
        expect(response.body.books[1].title).to.equal('Learning JavaScript Design Patterns'); = 2. kitabın title'ini kontrol ettik.

        expect(response.headers.connection).to.equal('keep-alive'); = response header'de connection key'inin value'sini kontrol ettik.
  
        const { books } = response.body.books; = response body değişkene kaydedilebilir.
  
        // a loop for verification title
  
        cy.fixture('bookTitles').then((expectedBookTitle) => { = bookTitles.json'daki key, valueler ile Response body'i karşılaştırdık. 
          for (let i = 0; i < 8; i++) {
            expect(response.body.books[i].title).to.equal(expectedBookTitle[i]);
            console.log(expectedBookTitle[i]);
          }
        });
      });
    });
  });

Cypress'te internet sitesinde yapılan testlerde request'e tıklayınca konsolda request ve response kısmı çıkıyor.

----------------------------------------------------------------------------------------------
cypress.config.js içinde olanlar



const { defineConfig } = require("cypress");

module.exports = defineConfig({
  e2e: {
    baseUrl: 'https://practice.cydeo.com/',
    env: {                                    = env kısmı.
      login:"/login",
      apiUrl:"https://demoqa.com",
      apiBooks:"/BookStore/v1/Books",
      generateUser:"/Account/v1/User",
      generateToken:"/Account/v1/GenerateToken",
      loginAPI:"/Account/v1/Login"
    },
    video: false,
    retries: 1,
    defaultCommandTimeout: 5000,
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
  },
});


----------------------------------------------------------------------------------------------
booktitles.json içinde yazanlar
{
    "0" : "Git Pocket Guide",
    "1" : "Learning JavaScript Design Patterns",
    "2" : "Designing Evolvable Web APIs with ASP.NET",
    "3" : "Speaking JavaScript",
    "4" : "You Don't Know JS",
    "5" : "Programming JavaScript Applications",
    "6" : "Eloquent JavaScript, Second Edition",
    "7" : "Understanding ECMAScript 6"
    }


----------------------------------------------------------------------------------------------
spartanApi.cy.js içinde yazanlar


describe('Spartan API tests', { baseUrl: 'http://54.226.211.37:8000/' }, () => { = baseUrl ekledik.
  it('Get a single spartan', () => {

    cy.request('GET', 'api/spartans/100').then((response) => { = Yukarıda requesti yazarken JSON object girerken burada GET method ve url'i direkt parametre olarak girdik.
      expect(response.status).to.equal(200);
      expect(response.body.name).to.equal('Terence');          = response body'den sonraki kısım JSON response'teki child'leri işaret ediyor.
    });
  });

  it('POST one spartan test', () => {
    cy.request({                                               = JSON object kullanarak request yazdık.
      method: 'POST',                                         
      url: 'api/spartans',                                     = describe'de baseUrl tanımlayınca url kısmında bütün url'i yazmadık.
      body: {                                                  = body yolladık.
        gender: 'Male',
        name: 'Sasha',
        phone: 2345234522,
      },
    }).then((response) => {
      expect(response.status).to.equal(201);
      expect(response.body.success).to.equal('A Spartan is Born!');
      expect(response.body.data.name).to.equal('Sasha');
    });
  });
});




----------------------------------------------------------------------------------------------
apiAndUiTogether.cy.js içinde yazanlar


const username = `user${Math.floor(Math.random() * 100000 + 100000) = username ve password oluşturduk.
    .toString()
    .substring(1)}`;
  const passWord = 'Test123456!';
  
  describe('E2E - Test API integrated UI Test', () => {
    beforeEach('create a user and generate token from API and set cookies', () => {
      

      cy.request({
        method: 'POST',                                                     = POST methodu kullandık.
        url: `${Cypress.env('apiUrl')}${Cypress.env('generateUser')}`,      = url yazdık.
        body: {                                                             = body'den username, password girdik.
          userName: username,
          password: passWord,
        },
      }).then((response) => {                                               = requesti yazınca kullanıcı oluştu.                                      
        cy.setCookie('userID', response.body.userID);                       = response'i aldıktan sonra setCookie olarak userid ve username ayarladık. Cookie yazınca UI'dan login
        cy.setCookie('UserName', response.body.username);                     otomatik olarak gerçekleşiyor. API'dan girerken hala username ve password yazıyoruz.
      });                                                                     

      cy.request({
        method: 'POST',
        url: `${Cypress.env('apiUrl')}${Cypress.env('generateToken')}`,     = özel url'ye post yolladık.
        body: {
          userName: username,
          password: passWord,
        },
      }).then((response) => {
        cy.setCookie('token', response.body.token);                         = token ve expires'i cookie'lere kaydettik.
        cy.setCookie('expires', response.body.expires);
      });
    });
    afterEach('Deleting USER created for testing by using API request', () => {
      
      cy.request({
        method: 'POST',
        url: `${Cypress.env('apiUrl')}${Cypress.env('loginAPI')}`,          = API'da kullanıcıyı silebilmek için önce giriş yapmak lazım.
        body: {
          userName: username,
          password: passWord,
        },
      }).then((response) => {                                               = response içinde tekrar request yazarak DELETE methodunu kullandık.
        cy.request({                                                          // we are chaining API requests to login then delete
          method: 'DELETE',
          headers: {                                                        = request kısmında headers kullandık.
            authorization: `Bearer ${response.body.token}`,
          },
          url: `${Cypress.env('apiUrl')}${Cypress.env('generateUser')}/${response.body.userId}`,
        });
      });
    });
  
    it('Check if user is logged in from UI environment', { baseUrl: 'https://demoqa.com' }, () => { = baseUrl ekledik.
      cy.visit('/profile');
      cy.get('#userName-value').contains(username).should('be.visible');                            = cookie'lerden dolayı UI'ya girerken login yapmaya gerek kalmadı.
    });
  });

API ile UI testlerinin birlikte yapılmasının sebebi API'da kullanıcı oluşturmak ve login yapmak hızlı gerçekleşiyor. Cookie'ler oluşturunca UI'da login işlemi otomatik gerçekleşmiş
oluyor. Dolayısıyla beforeEach ve afterEach içine API testleri yazdık. it içine UI testi yazdık.





----------------------------------------------------------------------------------------------
cydeoCypressTests için .github folder açtık. .github içinde workflows folder açtık. içine main.yml ekledik.

main.yml içinde yazanlar

name: Cydeo Cypress Tests = main.yml oluşturduktan sonra VS Code'i tekrar açınca yml dosyası için yükleme önerisi çıkıyor. Onu yükleyince main.yml'de sağ alttaki yaml, 
                            GitHub Actions Workflow'a çeviriliyor.
on:
    schedule:
        # schedule at 10:00 sunday
        - cron: '0 10 * * sun'      = Her pazar saat 10'da GitHub'da testler çalışır.
    
    push:                           = Kodlar pushlandığında testler çalışır. Javascript kullanınca developerler ile aynı env'de çalışılabilir. Her push olduğunda CI otomatik olarak
        branches:                     gerçekleşir. Kodu pushladıktan sonra GitHub'ta actions kısmından test sonuçlarına bakılabilir.
            - main

jobs: 
    cypress-run:
        runs-on: ubuntu-latest
        container: cypress/browsers:node12.18.3-chrome87-ff82
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Install Dependencies
              run: npm install
              
            - name: Cypress Run
              uses: cypress-io/github-action@v4 
              with:
                # since we have installed dependencies we set it false
                install: false 
                browser: chrome
                spec: cypress/e2e/**/* = e2e'nin bir birim parent'inin altındaki tüm testler çalışacak.



GitHub sürekli kodları çalıştırmasın diye yml'in extension'sını değiştirdik.






