import torch
from torch import nn            --> nn contains all of PyTorch's building blocks for neural networks 
import matplotlib.pyplot as plt

# Check PyTorch version
torch.__version__

----

1. Data (preparing and loading)
Data can be almost anything... in machine learning.

Excel speadsheet
Images of any kind
Videos (YouTube has lots of data...)
Audio like songs or podcasts
DNA
Text

Machine learning is a game of two parts:

Get data into a numerical representation.
Build a model to learn patterns in that numerical representation.


Linear regression

In statistics, linear regression is a statistical model that estimates the linear relationship between a scalar response (dependent variable) and 
one or more explanatory variables (regressor or independent variable). The case of one explanatory variable is called simple linear regression; 
for more than one, the process is called multiple linear regression.[1] This term is distinct from multivariate linear regression, 
where multiple correlated dependent variables are predicted, rather than a single scalar variable.[2] If the explanatory variables are measured 
with error then errors-in-variables models are required, also known as measurement error models.


Doğrusal regresyonda, karmaşık sayı setini bir doğru formülüne indirgemeye çalışılır. Buna göre tüm noktalara en yakından geçen bir doğru çizmek amaçlanır.
Bu hata miktarının en az tutulmasıdır. Hata, verilerdeki yanlışlık değil, sapmadır. Yanlış olan modeldir.
Doğrusal regresyon ile amaçlanan bu noktaların tamamına en yakın geçen doğruyu elde etmektir. Her doğrunun bir formülü olduğu gibi bu doğrunun da karakteristik
bir şekilde y = ax + b denklemine uygun bir formülü, bir (a,b) ikilisi bulunacaktır.

Kaynaklar = https://en.wikipedia.org/wiki/Linear_regression
	    https://aydemirhamza.medium.com/do%C4%9Frusal-lineer-regresyon-de873548e0fd





To showcase this, let's create some known data using the linear regression formula.
We'll use a linear regression formula to make a straight line with known parameters.


# Create *known* parameters
weight = 0.7
bias = 0.3

# Create
start = 0
end = 1
step = 0.02
X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias                               --> y = bx + a  

X[:10], y[:10]       --> 10. indexin solundakileri yazdı 10. index dahil değil.

Sonuç

(tensor([[0.0000],
         [0.0200],
         [0.0400],
         [0.0600],
         [0.0800],
         [0.1000],
         [0.1200],
         [0.1400],
         [0.1600],
         [0.1800]]),
 tensor([[0.3000],
         [0.3140],
         [0.3280],
         [0.3420],
         [0.3560],
         [0.3700],
         [0.3840],
         [0.3980],
         [0.4120],
         [0.4260]]))


len(X), len(y)  --> (50, 50)


-------------------------------------------------------------------

	