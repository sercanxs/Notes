window.onload = function(){ = bütün html kodları yüklendikten sonra JavaScript kodu çalışır. JavaScript kodları buranın içine yazılır.

}

window.onbeforeunload = function(){          = return kısmını da yazınca, site refreshlenirken uyarı çıkıyor.
   console.log("before unload");             = refreshlenmeden önce konsolda yazıyor.
   return "Are you sure you want to leave";  

}

---------------------------------------------------------------------------------------------------------------------------
Strict comparison

"0"===0  --> false = Strict comparison'da sol taraf string sağ taraf number ise sonuç falsedir.

---------------------------------------------------------------------------------------------------------------------------
if (true) {
   var varName="sr";    = var, if dışında geçerli oluyor.
}

function name(params) {
   var varName ="sr";   = var, function dışında geçerli olmuyor.
}


---------------------------------------------------------------------------------------------------------------------------
console.log(varName); = değişken önceden ya da sonradan declare edilirse bu kısım hata vermez.(Hoisting)

var varName; = assign etmediğimizde undefined variable oluşuyor.
console.log(varName); = undefined.


---------------------------------------------------------------------------------------------------------------------------
JavaScript is event driven language. = Bir şeyler olması için örneğin birisinin bir şeye tıklaması lazım.


console.log("Waiting 2.5 seconds"); = primary function.

setTimeout(function () {                    = Callback functions
    console.log("Do this thing in here");      
}, 2500); 

console.log("Last line"); 

---------------------------------------------------------------------------------------------------------------------------
"use strict"; = strict kullandığımızda hata olarak gözükmeyen yazım hatalarını sitede yakalayabiliyoruz.

x = "Thing"; = hata olarak yazılan x'i strict ile yakaladık.

---------------------------------------------------------------------------------------------------------------------------

setInterval(function () {
    console.log(" sdsd");  = 2 saniye aralıklarla aynı mesajı yazıyor.
}, 2000);

----------------------------

let count =0;

const interval1 = setInterval(function () { = interval'ı değişken olarak kaydettik.
    console.log(" sdsd");
    count++;                               

    if(count===3){
        
        clearInterval(interval1);           = belirli koşul sağlanınca interval'ı kapattık.
        console.log("That was the last one");

    }
}, 2000);


---------------------------------------------------------------------------------------------------------------------------
let x =0;

while (x<10) {   = While loop
x++;
console.log(x);
    
}

---------------------------

while (true) {

let name = prompt("What is your name?");   = bilgi sitenin ön yüzünden alınıyor.

if(name==="android"){
break;                                     = koşul sağlanınca while loop kapatılıyor.
}
    
}



---------------------------------------------------------------------------------------------------------------------------
let d = new Date(2025,0,20); = date oluşturduk. Aylar 0'dan başladı.

d.getFullYear().log = yılı verdi.

d.getDate() = gün

d.setYear(2030); = yılı tekrar ayarladık.



---------------------------------------------------------------------------------------------------------------------------
Destructuring an Array


const months = ["January","February","March"]; = Array'de 3 tane değer var.

const[jan,feb] = months;                       = Bu şekilde jan ve feb değişkeni oluşturarak Array'den January ve February'i aldık.

console.log(jan,feb);                          = jan ve feb yazınca January ve February gözüküyor.


-------------------------------------

const person3 = {                              = Object açtık.
    "name":"Andromeda",
    "city":"Alexandria",
    "something else":"something else"
}

const{name,city}=person3;                      = name ve city değişkenlerini kolayca yazarak object'teki key valuelerini aldık. Yazılan değerler keylerle uyuşmalı yani name123 çalışmaz.

console.log(name);
console.log(city);



---------------------------------------------------------------------------------------------------------------------------
const person3 = {
    "name":"Andromeda",
    "city":"Alexandria",
    "something else":"something else"
}

delete person3["city"];                 = JavaScriptte değişkenler silinemez ama objectin özellikleri silinebilir.

delete person3;                         = bu kısmın hata vermesi için strict kullanmak lazım.

---------------------------------------------------------------------------------------------------------------------------
let num1 = Math.round(4.6); --> yakına yuvarlar = 5.

let num1 = Math.pow(3,2); --> 3 üzeri 2 = 9.

let num1 = Math.sqrt(9); --> 9'un karekökü = 3.

let num1 = Math.max(1,4,232); --> En yüksek değeri veriyor.

let num1 =Math.floor(23.7); --> aşağı yuvarlar = 23.

let num1 =Math.ceil(23.1); --> tavana yuvarlar = 24.

---------------------------------------------------------------------------------------------------------------------------
let num1 =Math.random(); = 0 ve 1 arasında rastgele numara veriyor.

let num1 =Math.floor(Math.random()*100); = 0 ve 100 arasında rastgele numara verir.


---------------------------------------------------------------------------------------------------------------------------
try {                                    = try, catch ile hata yakalanabilir. Try, catch dışındaki kodlar okunmaya devam eder. finally de kullanılabilir.
    functionThatDoesntExist();
} catch (error1) {                       = error1 variable ismidir.
    console.warn(error1);                = error1 yazınca gerekli hata mesajı yazdı.
}

console.log("Show me!!!");


---------------------------

try {
    throw "custom error";                  = Custom error oluşturduk.
} catch (error1) {                          
    console.warn("ERROR LOGGING:", error1); = Yukarıdaki custom error yazısı bu kısıma eklendi.
}

console.log("Show me!!!");


---------------------------------------------------------------------------------------------------------------------------
const person5 = {
       
    "name":"Andromeda",
    "city":"Alexandria",
    speak(){
      console.log(`My name is ${person5["name"]}`);  = person5 key'ini kendi objectinde kullandık.
    }
}

person5.speak();

const person5 = {
       
    "name":"Andromeda",
    "city":"Alexandria",
    speak(){
      console.log(`My name is ${this.name}`);  = this.name yazarak direkt objectin içi işaret edilebilir.
    }
}

person5.speak();

function counter() {
    
    if(this.total===undefined){  = function içinde de this kullanılabilir. const let var ile total oluşturulursa this.total çalışmaz.
        this.total=1;
    }
    console.log(this.total);
}


---------------------------------------------------------------------------------------------------------------------------

const Hello = () => {             = arrow function let us write shorter code.
    
   console.log("hi");

}
Hello();


const Hello = () => "Hello from one line function"; = 1 satırlık function yazdığımızda bu kısımı return olarak aldı. console.log() yazarsak return olarak almaz.

console.log(Hello());



const Hello = (city) => `Hello from ${city}`;       = parametre kullandık.

console.log(Hello("Andromeda"));


const function1 = function counter(num1) {   = isimli function değişken olarak kaydedilebilir.
    console.log("1");
}

const function2 = function(num1) {           = isimsiz function değişken olarak kaydedilebilir.
    console.log("5");
}



const Hello = () => {           = arrow function'ında this aranırken diğer functionların içine bakılır ve gerekli değer bulunur.

    this.numOlder=5;

console.log(this.numNewer);    
                             
}
                             

const function2 = function aa() {
  
    
   
    console.log(this.numOlder); = normal function'da this aranırken diğer functionların içine bakılmaz.
    
    this.numNewer=10;
}


function2();
Hello();

-------------------------------

let me = {              = Object oluşturduk.

 
 name:"Andromeda",      
 
  thisInArrow: () => {    
   console.log("sadasd "+ this.name);   = arrow function'da this çalışmaz.                   
  },
            
    
    thisInReqular() {   
    console.log("sadasd "+this.name);   = regular function'da this çalışır.
  
  }
  
}



me.thisInArrow();
me.thisInReqular();


---------------------------------------------------------------------------------------------------------------------------

class Name1 {               = class oluşturduk. Object oluşturmanın diğer yolu classlardir.
   speak(){                 = function ekledik.
    console.log("1234");
   }

} 

const thing = new Name1();  = Yeni object oluşturduk ve değişkene kaydettik.
thing.speak();

---------------------------------------

class Name1 {
  setName(name){
    this.name=name;           = bir function içinde this.name'e değer verdik.
  }
   speak(){
    console.log(this.name);   = diğer function'da this.name'i kullandık.
   }

} 

const thing = new Name1();

thing.setName("Andromeda");
thing.speak();

---------------------------------------------------------------------------------------------------------------------------

class person {

     constructor(name){                          = constructor oluşturduk.
         this.name=name;
     }
     city(){
           console.log(`2sde ${this.name}`);
     }

} 


const person1 = new person("Andromeda");         = new keyword call the constructor and create the object.
person1.city();


---------------------------------------------------------------------------------------------------------------------------
JSON --> JavaScript Object Notation. 
Bir programlama dili, JSON kullanarak başka programlama dili ile konuşabilir.


const object = {       = JavaScript objectin başındaki kısım silindiğinde JSON olur.
   
   "city":"Tokyo",
   "year":"1990",
   "age":34


}


{                      = JSON.
   "city":"Tokyo",
   "year":"1990",
   "age":34
}

---------------------------------------------------------------------------------------------------------------------------
fetch("https://swapi.dev/api/people/1")     = AJAX oluşturmanın yollarından biri fetch'dir. AJAX'la daha az kod kullanılır ve gerektikçe JSON çağırılır.
.then(response => response.json())          = response'i json olarak aldık.
.then(data1 => {
  console.log(data1);                        = Gerekli data'yı JSON response olarak yazdı. data1 kendi verdiğimiz isim.
})


---------------------------------------------------------------------------------------------------------------------------

<div id="name"></div>                    
<div id="birthyear"></div>
<div id="eyecolor"></div>

<button class="getRandomCharacter">Randomize</button> = button oluşturduk.


-------------------------------------

const name = document.getElementById("name");                   = JavaScript dosyasında div'lere bağlandık.
const birthyear = document.getElementById("birthyear");
const eyecolor = document.getElementById("eyecolor");


const button = document.querySelector(".getRandomCharacter");   = button'a bağlandık.
button.addEventListener('click', (e) => {                       = addEventListenerde bir olay olduğunda bir durum gerçekleşiyor.
  e.preventDefault();                                           = Eğer element başka bir internet sitesine gitmek gibi bir olaya programlanmışsa preventDefault bunu engeller.
  console.log("clicked");                                       

  const randomNumber = Math.ceil(Math.random()*83);

  fetch("https://swapi.dev/api/people/"+randomNumber)
  .then(response => response.json())
  .then(character1 => {
    console.log(character1); 
    name.innerHTML = character1["name"];                        = JSON response'den alınan bilgilerle kutuları doldurduk.
    birthyear.innerHTML = character1["birth_year"]       
    eyecolor.innerHTML = character1["eye_color"]            
  })
    
})


---------------------------------------------------------------------------------------------------------------------------
Kitap önerileri = Eloquent JavaScript
                  GoalKicker














 



